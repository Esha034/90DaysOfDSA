class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        n=len(nums)
        l,h=0,n-1
        if nums[0]!=nums[1]:
            return nums[0]
        if nums[n-1]!=nums[n-2]:
            return nums[n-1]
        while l<=h:
            mid=l+(h-l)//2
            if nums[mid-1]!=nums[mid]!=nums[mid+1]:
                return nums[mid]
            if mid%2==0:
                if nums[mid]==nums[mid-1]:
                    h=mid-1
                else:
                    l=m+1
            else:
                if nums[mid]==nums[mid-1]:
                    l=mid+1
                else:
                    h=mid-1
#more optimal
        # left, right = 0, len(nums) - 1
        # while left < right:
        #     mid = (left + right) // 2
        #     # ensure mid is even (start of a pair)
        #     if mid % 2 == 1:
        #         mid -= 1
        #     if nums[mid] == nums[mid + 1]:
        #         left = mid + 2
        #     else:
        #         right = mid
        # return nums[left]
#better
        # result = 0
        # for num in nums:
        #     result ^= num
        # return result






#bruteforce 
        # n = len(nums)
        # if n == 1:
        #     return nums[0]

        # for i in range(n):
        #     if i == 0 and nums[i] != nums[i+1]:
        #         return nums[i]
        #     elif i == n-1 and nums[i] != nums[i-1]:
        #         return nums[i]
        #     elif nums[i] != nums[i-1] and nums[i] != nums[i+1]:
        #         return nums[i]

        
